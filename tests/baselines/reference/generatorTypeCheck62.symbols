=== tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck62.ts ===

export interface StrategicState {
>StrategicState : Symbol(StrategicState, Decl(generatorTypeCheck62.ts, 0, 0))

    lastStrategyApplied?: string;
>lastStrategyApplied : Symbol(StrategicState.lastStrategyApplied, Decl(generatorTypeCheck62.ts, 1, 33))
}

export function strategy<T extends StrategicState>(stratName: string, gen: (a: T) => IterableIterator<T | undefined>): (a: T) => IterableIterator<T | undefined> {
>strategy : Symbol(strategy, Decl(generatorTypeCheck62.ts, 3, 1))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 5, 25))
>StrategicState : Symbol(StrategicState, Decl(generatorTypeCheck62.ts, 0, 0))
>stratName : Symbol(stratName, Decl(generatorTypeCheck62.ts, 5, 51))
>gen : Symbol(gen, Decl(generatorTypeCheck62.ts, 5, 69))
>a : Symbol(a, Decl(generatorTypeCheck62.ts, 5, 76))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 5, 25))
>IterableIterator : Symbol(IterableIterator, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 5, 25))
>a : Symbol(a, Decl(generatorTypeCheck62.ts, 5, 120))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 5, 25))
>IterableIterator : Symbol(IterableIterator, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 5, 25))

    return function*(state) {
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 6, 21))

        for (const next of gen(state)) {
>next : Symbol(next, Decl(generatorTypeCheck62.ts, 7, 18))
>gen : Symbol(gen, Decl(generatorTypeCheck62.ts, 5, 69))
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 6, 21))

            if (next) {
>next : Symbol(next, Decl(generatorTypeCheck62.ts, 7, 18))

                next.lastStrategyApplied = stratName;
>next.lastStrategyApplied : Symbol(StrategicState.lastStrategyApplied, Decl(generatorTypeCheck62.ts, 1, 33))
>next : Symbol(next, Decl(generatorTypeCheck62.ts, 7, 18))
>lastStrategyApplied : Symbol(StrategicState.lastStrategyApplied, Decl(generatorTypeCheck62.ts, 1, 33))
>stratName : Symbol(stratName, Decl(generatorTypeCheck62.ts, 5, 51))
            }
            yield next;
>next : Symbol(next, Decl(generatorTypeCheck62.ts, 7, 18))
        }
    }
}

export interface Strategy<T> {
>Strategy : Symbol(Strategy, Decl(generatorTypeCheck62.ts, 14, 1))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 16, 26))

    (a: T): IterableIterator<T | undefined>;
>a : Symbol(a, Decl(generatorTypeCheck62.ts, 17, 5))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 16, 26))
>IterableIterator : Symbol(IterableIterator, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(generatorTypeCheck62.ts, 16, 26))
}

export interface State extends StrategicState {
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))
>StrategicState : Symbol(StrategicState, Decl(generatorTypeCheck62.ts, 0, 0))

    foo: number;
>foo : Symbol(State.foo, Decl(generatorTypeCheck62.ts, 20, 47))
}

export const Nothing1: Strategy<State> = strategy("Nothing", function*(state: State) {
>Nothing1 : Symbol(Nothing1, Decl(generatorTypeCheck62.ts, 24, 12))
>Strategy : Symbol(Strategy, Decl(generatorTypeCheck62.ts, 14, 1))
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))
>strategy : Symbol(strategy, Decl(generatorTypeCheck62.ts, 3, 1))
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 24, 71))
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))

    return state;
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 24, 71))

});

export const Nothing2: Strategy<State> = strategy("Nothing", function*(state: State) {
>Nothing2 : Symbol(Nothing2, Decl(generatorTypeCheck62.ts, 28, 12))
>Strategy : Symbol(Strategy, Decl(generatorTypeCheck62.ts, 14, 1))
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))
>strategy : Symbol(strategy, Decl(generatorTypeCheck62.ts, 3, 1))
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 28, 71))
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))

    yield state;
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 28, 71))

});

export const Nothing3: Strategy<State> = strategy("Nothing", function* (state: State) {
>Nothing3 : Symbol(Nothing3, Decl(generatorTypeCheck62.ts, 32, 12))
>Strategy : Symbol(Strategy, Decl(generatorTypeCheck62.ts, 14, 1))
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))
>strategy : Symbol(strategy, Decl(generatorTypeCheck62.ts, 3, 1))
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 32, 72))
>State : Symbol(State, Decl(generatorTypeCheck62.ts, 18, 1))

    yield ;
    return state;
>state : Symbol(state, Decl(generatorTypeCheck62.ts, 32, 72))

});
 
